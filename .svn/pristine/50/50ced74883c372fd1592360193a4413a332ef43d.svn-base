class ApplicationController < ActionController::Base
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.

  before_filter :cors_preflight_check
  
  protect_from_forgery with: :exception
  
  before_filter :configure_permitted_parameters, if: :devise_controller?
  
  rescue_from CanCan::AccessDenied do |exception|
    redirect_to unauthorized_path, :alert => exception.message
  end
  
  def set_access_control_headers
    headers['Access-Control-Allow-Origin'] = "*"
    headers['Access-Control-Allow-Methods'] = 'POST, PUT, DELETE, GET, OPTIONS'
    headers['Access-Control-Request-Method'] = '*'
    headers['Access-Control-Allow-Headers'] = 'Origin, X-Requested-With, Content-Type, Accept, Authorization'
  end
  
  def cors_preflight_check
    if request.method == 'OPTIONS'
      request.headers['Access-Control-Allow-Origin'] = '*'
      request.headers['Access-Control-Allow-Methods'] = 'POST, GET, PUT, PATCH, DELETE, OPTIONS'
      request.headers['Access-Control-Request-Method'] = '*'
      request.headers['Access-Control-Allow-Headers'] = 'X-Requested-With, X-Prototype-Version, Token, Auth-Token, Email'
      request.headers['Access-Control-Max-Age'] = '1728000'
    end
  end
  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.for(:sign_up) << :first_name << :middle_name << :last_name << :phone1 << :phone2 << :role_id
    
    devise_parameter_sanitizer.for(:account_update) { |u| 
      u.permit(:first_name, :middle_name, :last_name, :phone1, :phone2, :email, :password, :password_confirmation, :current_password, :customer_id, roles_attributes: [:role_id]) 
    }
  end
  
  def after_sign_in_path_for(resource)
    logger.debug "registration controller : resources is : "
    logger.debug "current_user.id is #{current_user.id}"
    _user = User.new
      if _user.campaign_manager(current_user.id)
        logger.debug "Application Controoler : def after_sign_in_path_for(resource) : CAMPAIGN MANAGER"
        '/campaign_manager_landing' 
      elsif _user.specialist(current_user.id)
        logger.debug "Application Controoler : def after_sign_in_path_for(resource) : SPECIALIST"
        '/specialist_landing'
      elsif _user.admin(current_user.id)
        logger.debug "Application Controoler : def after_sign_in_path_for(resource) : ADMIN"
        '/admin_landing'
      else
      end
  end
  
end
