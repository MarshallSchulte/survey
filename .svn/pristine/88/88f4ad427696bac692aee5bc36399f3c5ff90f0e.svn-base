class CampaignsController < ApplicationController
  before_action :set_campaign, only: [:show, :edit, :update, :destroy]
  before_action :find_specialists
  before_filter :set_cache_buster, only: [:survey]
  load_and_authorize_resource

  # GET /campaigns
  # GET /campaigns.json
  def index
    @campaigns = Campaign.all
  end

  # GET /campaigns/1
  # GET /campaigns/1.json
  def show
  end

  # GET /campaigns/new
  def new
    @campaign = Campaign.new
    @metric = Metric.new
    @metrics = Metric.all
    2.times { @campaign.questions.build }
    @templates = Campaign.where(template:true)
    
  end
  
  # GET /add_reviewers/1
  def add_reviewers
    @campaign = Campaign.find(params[:id])
    @vendor = Vendor.find(@campaign.vendor_id)
    unless @campaign.reviewers
      1.times { @campaign.reviewers.build }
    end
    respond_to :html, :json, :js
  end
  
  # GET /send_campaign/1
  def confirm
    @campaign = Campaign.find(params[:id])
    @campaign.update(survey_sent: true, status: "In Process")
    @campaigns = Campaign.where(manager_id: current_user.id)
  end
  
  def send_campaign
    @campaign = Campaign.find(params[:id])
    @campaign.update(survey_sent: true, status: "Submitted For Review")
    @specialist_campaigns = Campaign.where(specialist_id: current_user.id)
  end
  
  def drafted
    @campaign = Campaign.find(params[:id])
    @campaign.update(survey_sent: true, status: "Draft")
    @campaigns = Campaign.where(manager_id: current_user.id)
  end
  
  def on_hold
    @campaign = Campaign.find(params[:id])
    @campaign.update(status: "On Hold")
    @campaigns = Campaign.where(manager_id: current_user.id)
  end
  
      # GET /send_campaign/1
  def send_to_reviewers
    @specialist_campaigns = Campaign.where(specialist_id: current_user.id)
    @campaign = Campaign.find(params[:id])
    @campaigns = Campaign.where(manager_id: current_user.id)
    @campaign.update(status: "In Process")
    @campaign.reviewers.each do |reviewer|
      #Send Mail with the survey link to each reviewer.
      #_survey_link  = "/survey/?token=#{reviewer.token}"
      #_email        = reviewer.email
      @reviewer = reviewer
      logger.debug "Before Survey Mail"
      SurveyMailer.survey_email(@reviewer).deliver!
      logger.debug "After Survey Mail"
    end
  end
  
  def resend_survey
    @reviewer = Reviewer.find(params[:id])
    logger.debug "Before Survey Mail #{SurveyMailer.survey_email(@reviewer)}"
      SurveyMailer.survey_email(@reviewer).deliver!
      logger.debug "After Survey Mail"
  end
  
  def save_survey
    @campaign = Campaign.find(params[:id])
    logger.debug "campaign is #{@campaign.name}"
    if @campaign.update(campaign_params)
      logger.debug "-----------------SAVE COMPLETE--------------------"
       @reviewer = Reviewer.find(@campaign.responses.last.reviewer_id)
       @reviewer.update(survey_complete: false)
       redirect_to root_path
    end
  end
  
  
  # GET /campaigns/1
  def survey
    @reviewer = Reviewer.find_by_token(params[:token])
    logger.debug "@reviewer is : #{params[:token]}"
    #campaign_id = CampaignsReviewer.find_by_reviewer_id(@reviewer.id).campaign_id
    cmp = Campaign.find_by_sql("SELECT campaigns.id, campaigns_reviewers.reviewer_id FROM campaigns, campaigns_reviewers
                                   WHERE campaigns.id = campaigns_reviewers.campaign_id AND campaigns_reviewers.reviewer_id = #{@reviewer.id}")
    logger.debug "cmp.inspect is : #{cmp[0].id}"
    @campaign = Campaign.find(cmp[0].id)
    incomplete = 0
    @campaign.questions.each do |q| 

      if (q.responses.where(reviewer_id: @reviewer.id).blank?) || (q.responses.where(reviewer_id: @reviewer.id, answer_option: nil).present?)   
          incomplete += 1
      end
    end
    
    if incomplete > 0
      logger.debug "----incomplete:#{incomplete}------------"
      @reviewer.update(survey_complete: false)
      
    else
      @reviewer.update(survey_complete: true)
    end
    
    logger.debug "@campaign is : #{@campaign.inspect}"
  end

  # GET /campaigns/1/edit
  def edit
    @metrics = Metric.all
    @questions = @campaign.questions
    @templates = Campaign.where(template:true)
  end

  # POST /campaigns
  # POST /campaigns.json
  def create
    @campaign = Campaign.new(campaign_params)
    @campaigns = Campaign.where(manager_id: current_user.id)
    @campaign.manager_id = current_user.id
    @campaign.status = "Draft"
    @campaign.survey_sent = false
    @templates = Campaign.where(template:true)
    if current_user.roles.first.name == "Admin"
      @campaign.template = true
    else
      @campaign.template = false
      
      @template = Campaign.find(@campaign.template_id)
      @template.questions.each do |q|
        dupe = q.dup
        kpid = q.kpi_id
        orig_kpi = Kpi.find(kpid)
        kpi_dupe = orig_kpi.dup
        kpi_dupe.original_kpi_id = kpid
        kpi_dupe.save
        dupe.kpi_id = kpi_dupe.id
        @campaign.questions << dupe
      end
    end
    respond_to do |format|
      if @campaign.save
        # #logger.debug "@campaign.questions is #{@campaign.questions.to_a}"
        # #logger.debug "params[:campaign][:questions_attributes] is #{params[:campaign][:questions_attributes]}"
        # @campaign.questions.each do |question, index|
            # #logger.debug "question #{index}, QID is #{question.id}"
            # params[:campaign][:questions_attributes].each do |k, v|
              # #v['contact_ids'] = [ v['contact_ids'] ] unless v['contact_ids'].is_a?(Array)
              # #logger.debug "k is: #{k} AND v is: #{v} AND reviewer_types are: #{v[:id]}"
              # #logger.debug "@campaign.questions[#{k}] is #{@campaign.questions[k.to_i].inspect}"
              # if v[:id].include? "1"; @campaign.questions[k.to_i].rt_supplier = true; end;
              # if v[:id].include? "2"; @campaign.questions[k.to_i].rt_business_unit = true; end;
              # if v[:id].include? "3"; @campaign.questions[k.to_i].rt_strategic_sourcing = true; end;
              # if v[:id].include? "4"; @campaign.questions[k.to_i].rt_supplier_diversity = true; end;
              # if v[:id].include? "5"; @campaign.questions[k.to_i].rt_governance = true; end;
              # if v[:id].include? "6"; @campaign.questions[k.to_i].srm = true; end;
            # end
        # end
         # logger.debug "@campaign.questions.to_a is #{@campaign.questions.to_a}"
         # @campaign.save # After the Supplier types assignments are made.
        format.html { redirect_to root_path, notice: 'Campaign was successfully created.' }
        format.json { render root_path, status: :created, location: @campaign }
        format.js
      else
        format.html { render :new }
        format.json { render json: @campaign.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /campaigns/1
  # PATCH/PUT /campaigns/1.json
  def update
    if current_user
      @campaigns = Campaign.where(manager_id: current_user.id)
      @specialist_campaigns = Campaign.where(specialist_id: current_user.id)
      @templates = Campaign.where(template:true)
    end
      
    respond_to do |format|
      if @campaign.update(campaign_params)
       logger.debug "-----------------UPDATE COMPLETE--------------------"
       unless current_user
        incomplete = 0
        @reviewer = Reviewer.find(@campaign.responses.last.reviewer_id)
        if params[:commit] == "Submit"
         @campaign.questions.each do |q|
          if q.responses
            if (q.responses.where(reviewer_id: @reviewer.id).blank?) || (q.responses.where(reviewer_id: @reviewer.id, answer_option: nil).present?)   
                incomplete += 1
            end
          
            if incomplete > 0
              logger.debug "----incomplete:#{incomplete}------------"
              @reviewer.update(survey_complete: false)
              
            else
              @reviewer.update(survey_complete: true)
              if @campaign.reviewers.where(survey_complete: false).blank?
                @campaign.update(rr: true)
              end
            end
          end
         end
        elsif params[:commit] == "Save"
          @reviewer.update(survey_complete: false)
        end
       end
        # @campaign.questions.each do |question, index|
            # logger.debug "question #{index}, QID is #{question.id}"
            # params[:campaign][:questions_attributes].each do |k, v|
              # logger.debug "k is: #{k} AND v is: #{v} AND reviewer_types are: #{v[:id]}"
              # logger.debug "@campaign.questions[#{k}] is #{@campaign.questions[k.to_i].inspect}"
              # if v[:id].include? "1"; @campaign.questions[k.to_i].rt_supplier = true; end;
              # if v[:id].include? "2"; @campaign.questions[k.to_i].rt_business_unit = true; end;
              # if v[:id].include? "3"; @campaign.questions[k.to_i].rt_strategic_sourcing = true; end;
              # if v[:id].include? "4"; @campaign.questions[k.to_i].rt_supplier_diversity = true; end;
              # if v[:id].include? "5"; @campaign.questions[k.to_i].rt_governance = true; end;
              # if v[:id].include? "6"; @campaign.questions[k.to_i].srm = true; end;
            # end
        # end
        # logger.debug "@campaign.questions.to_a is #{@campaign.questions.to_a}"
         # @campaign.save # After the Supplier types assignments are made.
        #format.html { redirect_to "/add_reviewers/#{params[:id]}", notice: 'Campaign was successfully updated.' }
        format.html { redirect_to root_path, notice: 'Campaign was successfully updated.' }
        format.json { render :show, status: :ok, location: @campaign }
        format.js
      else
        format.html { render :edit }
        format.json { render json: @campaign.errors, status: :unprocessable_entity }
      end
    end
  end
  
  def campaign_manager_landing
    @campaigns = Campaign.where(manager_id: current_user.id)
  end

  # DELETE /campaigns/1
  # DELETE /campaigns/1.json
  def destroy
    @campaign.destroy
    respond_to do |format|
      format.html { redirect_to campaigns_url, notice: 'Campaign was successfully destroyed.' }
      format.json { head :no_content }
    end
  end
  
  def import_campaign
    logger.debug "import_campaign is now called..."
  end
  
  def import
    Campaign.import(params[:file])
    redirect_to "/", notice: "Campaign imported."
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_campaign
      @campaign = Campaign.find(params[:id])
      # @user_roles = UserRole.where(role_id: 2)
      #@specialists = User.joins(:user_roles)
    end
    
    def find_specialists
      @specialists = User.find_by_sql("
      SELECT users.id, users.first_name, users.last_name,  
      user_roles.role_id, user_roles.user_id 
      FROM users, user_roles
      WHERE user_roles.role_id = 3 
      AND users.id = user_roles.user_id
      ")
    end
    
    def set_cache_buster
        response.headers["Cache-Control"] = "no-cache, no-store, max-age=0, must-revalidate"
        response.headers["Pragma"] = "no-cache"
        response.headers["Expires"] = "Fri, 01 Jan 1990 00:00:00 GMT"
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def campaign_params
      params.require(:campaign).permit(:tier, :name, :status, :start_date, :end_date, :user_id, :vendor_id, :customer_id, :specialist_id, :manager_id, :survey_sent, :template, :template_id, reviewer_ids: [], question_ids: [], questions_attributes: [:id, :metric_id, :kpi_id, :rt_supplier, :rt_business_unit, :rt_strategic_sourcing, :rt_supplier_diversity, :rt_governance, :srm, :weight, :opt1, :opt2, :opt3, :opt4, :opt5, :opt6, :opt7, '_destroy', responses_attributes: [:id, :answer_option, :question_id, :reviewer_id, :comment]], reviewers_attributes: [:id, :first_name, :last_name, :email, :reviewer_type_id, :survey_sent, :_destroy])
    end
end
